package handlers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/hmdev/GrowDeskV2/GrowDesk/backend/internal/data"
	"github.com/hmdev/GrowDeskV2/GrowDesk/backend/internal/middleware"
	"github.com/hmdev/GrowDeskV2/GrowDesk/backend/internal/models"
	"github.com/hmdev/GrowDeskV2/GrowDesk/backend/internal/utils"
)

// AuthHandler contiene manejadores para autenticaci√≥n
type AuthHandler struct {
	Store data.DataStore
}

// Login maneja solicitudes de inicio de sesi√≥n de usuarios
func (h *AuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	// Solo maneja solicitudes POST
	if r.Method != http.MethodPost {
		http.Error(w, "M√©todo no permitido", http.StatusMethodNotAllowed)
		return
	}

	// Parsear el cuerpo de la solicitud
	var loginReq models.LoginRequest
	if err := json.NewDecoder(r.Body).Decode(&loginReq); err != nil {
		http.Error(w, "El cuerpo de la solicitud es inv√°lido", http.StatusBadRequest)
		return
	}

	// Validar campos requeridos
	if loginReq.Email == "" || loginReq.Password == "" {
		http.Error(w, "Email y contrase√±a son requeridos", http.StatusBadRequest)
		return
	}

	// DEBUG: Log del intento de login
	fmt.Printf("üîê LOGIN ATTEMPT: Email=%s, Password=%s\n", loginReq.Email, loginReq.Password)

	// Buscar usuario en la base de datos por email
	fmt.Printf("üîç SEARCHING USER: Buscando usuario con email %s...\n", loginReq.Email)
	user, err := h.Store.GetUserByEmail(loginReq.Email)
	if err != nil {
		fmt.Printf("‚ùå USER NOT FOUND: Error al buscar usuario: %v\n", err)
		http.Error(w, "Credenciales inv√°lidas", http.StatusUnauthorized)
		return
	}

	fmt.Printf("‚úÖ USER FOUND: ID=%s, Email=%s, Password=%s, Active=%t\n",
		user.ID, user.Email, user.Password, user.Active)

	// Verificar la contrase√±a (en un sistema real usar√≠amos hash, pero para desarrollo comparamos directamente)
	fmt.Printf("üîë PASSWORD CHECK: Esperado='%s', Recibido='%s', Match=%t\n",
		user.Password, loginReq.Password, user.Password == loginReq.Password)

	if user.Password != loginReq.Password {
		fmt.Printf("‚ùå PASSWORD MISMATCH: Contrase√±a incorrecta\n")
		http.Error(w, "Credenciales inv√°lidas", http.StatusUnauthorized)
		return
	}

	// Verificar que el usuario est√© activo
	if !user.Active {
		fmt.Printf("‚ùå USER INACTIVE: Usuario no est√° activo\n")
		http.Error(w, "Usuario desactivado", http.StatusUnauthorized)
		return
	}

	fmt.Printf("üéØ LOGIN SUCCESS: Generando token para usuario %s\n", user.ID)

	// Generar token real con la informaci√≥n del usuario
	token, err := utils.GenerateToken(user.ID, user.Email, user.Role)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è TOKEN GENERATION FAILED: %v, usando mock token\n", err)
		// Fallback a mock token si hay problemas
		token = utils.GenerateMockToken()
	}

	// Preparar respuesta con datos reales del usuario
	resp := models.AuthResponse{
		Token: token,
		User: models.User{
			ID:         user.ID,
			Email:      user.Email,
			FirstName:  user.FirstName,
			LastName:   user.LastName,
			Role:       user.Role,
			Department: user.Department,
			Active:     user.Active,
		},
	}

	fmt.Printf("‚úÖ LOGIN COMPLETE: Devolviendo respuesta para usuario %s\n", user.ID)

	// Devolver token y informaci√≥n de usuario real
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

// Register maneja el registro de usuarios
func (h *AuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	// Solo maneja solicitudes POST
	if r.Method != http.MethodPost {
		http.Error(w, "M√©todo no permitido", http.StatusMethodNotAllowed)
		return
	}

	fmt.Printf("üìù REGISTER: Iniciando registro de nuevo usuario\n")

	// Parsear el cuerpo de la solicitud
	var registerReq models.RegisterRequest
	if err := json.NewDecoder(r.Body).Decode(&registerReq); err != nil {
		fmt.Printf("‚ùå REGISTER ERROR: Error al decodificar cuerpo: %v\n", err)
		http.Error(w, "El cuerpo de la solicitud es inv√°lido", http.StatusBadRequest)
		return
	}

	fmt.Printf("üìù REGISTER DATA: Email=%s, FirstName=%s, LastName=%s\n",
		registerReq.Email, registerReq.FirstName, registerReq.LastName)

	// Validar campos requeridos
	if registerReq.Email == "" || registerReq.Password == "" ||
		registerReq.FirstName == "" || registerReq.LastName == "" {
		fmt.Printf("‚ùå REGISTER ERROR: Campos incompletos\n")
		http.Error(w, "Todos los campos son requeridos", http.StatusBadRequest)
		return
	}

	// Verificar si el usuario ya existe
	_, err := h.Store.GetUserByEmail(registerReq.Email)
	if err == nil {
		fmt.Printf("‚ùå REGISTER ERROR: El email %s ya est√° registrado\n", registerReq.Email)
		http.Error(w, "El correo ya est√° registrado", http.StatusConflict)
		return
	}

	// Generar ID √∫nico para el usuario - USAR MISMO FORMATO QUE LA SECCI√ìN DE ADMIN
	// Cambio: usar formato num√©rico para el ID como en la secci√≥n de administraci√≥n
	userID := fmt.Sprintf("%d", time.Now().UnixNano())
	fmt.Printf("üìù REGISTER: ID generado para nuevo usuario: %s\n", userID)

	// Crear objeto de usuario
	newUser := models.User{
		ID:        userID,
		Email:     registerReq.Email,
		FirstName: registerReq.FirstName,
		LastName:  registerReq.LastName,
		Password:  registerReq.Password,
		Role:      "employee", // Por defecto, rol de empleado
		Active:    true,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	fmt.Printf("üìù REGISTER: Intentando guardar nuevo usuario en la base de datos...\n")
	// Guardar usuario en la base de datos
	if err := h.Store.CreateUser(newUser); err != nil {
		fmt.Printf("‚ùå REGISTER ERROR: Error al crear usuario en BD: %v\n", err)
		http.Error(w, "Error al crear usuario: "+err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Printf("‚úÖ REGISTER SUCCESS: Usuario %s (%s) guardado correctamente\n",
		userID, registerReq.Email)

	// Para diagn√≥stico: Verificar inmediatamente si el usuario se puede recuperar
	savedUser, err := h.Store.GetUserByEmail(registerReq.Email)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è REGISTER WARNING: El usuario se guard√≥ pero no se puede recuperar: %v\n", err)
	} else {
		fmt.Printf("‚úÖ REGISTER VERIFICATION: Usuario verificado en BD: ID=%s, Email=%s\n",
			savedUser.ID, savedUser.Email)
	}

	// Generar token JWT con la informaci√≥n del usuario
	token, err := utils.GenerateToken(newUser.ID, newUser.Email, newUser.Role)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è REGISTER WARNING: Error al generar token JWT: %v\n", err)
		// Fallback a mock token si hay problemas
		token = utils.GenerateMockToken()
	}

	// Preparar respuesta
	resp := models.AuthResponse{
		Token: token,
		User:  newUser,
	}

	fmt.Printf("‚úÖ REGISTER COMPLETE: Devolviendo respuesta para usuario %s\n", newUser.ID)

	// Devolver token y informaci√≥n de usuario
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(resp)
}

// Me devuelve la informaci√≥n del usuario actual
func (h *AuthHandler) Me(w http.ResponseWriter, r *http.Request) {
	// Solo maneja solicitudes GET
	if r.Method != http.MethodGet {
		http.Error(w, "M√©todo no permitido", http.StatusMethodNotAllowed)
		return
	}

	// Obtener informaci√≥n del usuario desde el contexto
	// Esto ser√° establecido por el middleware de autenticaci√≥n
	userID, ok := r.Context().Value(middleware.UserIDKey).(string)
	if !ok {
		http.Error(w, "No autorizado", http.StatusUnauthorized)
		return
	}

	email, _ := r.Context().Value(middleware.EmailKey).(string)
	role, _ := r.Context().Value(middleware.RoleKey).(string)

	// Preparar respuesta
	user := models.User{
		ID:        userID,
		Email:     email,
		FirstName: "Admin",
		LastName:  "User",
		Role:      role,
	}

	// Devolver informaci√≥n de usuario
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(user)
}
