# GrowDesk Docker Compose para Producci√≥n

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - VITE_API_URL=https://api.example.com/api
        - VITE_SYNC_API_URL=https://api.example.com/api/sync/users
    container_name: growdesk-frontend
    restart: unless-stopped
    networks:
      - grow-network
    environment:
      - VITE_API_URL=https://api.example.com/api
      - VITE_SYNC_API_URL=https://api.example.com/api/sync/users
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: growdesk-backend
    command: ["/app/server"]
    networks:
      - grow-network
    environment:
      - PORT=8080
      - DATA_DIR=/app/data
      - MOCK_AUTH=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-growdesk}
      - USE_POSTGRES=true
      - MIGRATE_DATA=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-clave_secreta_produccion}
      - SYNC_SERVICE_URL=http://sync-server:8000/api/sync
    volumes:
      - backend_data:/app/data
      - ./backend/.env.production:/app/.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis

  sync-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.sync
    container_name: growdesk-sync-server
    networks:
      - grow-network
    volumes:
      - backend_data:/app/data
      - ./backend/.env.production:/app/.env
    environment:
      - PORT=8000
      - DATA_DIR=/app/data
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-growdesk}
      - USE_POSTGRES=true
      - JWT_SECRET=${JWT_SECRET:-clave_secreta_produccion}
    restart: unless-stopped
    depends_on:
      - postgres
      - backend

  postgres:
    image: postgres:15-alpine
    container_name: growdesk-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-growdesk}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/internal/db/schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grow-network

  redis:
    image: redis:7-alpine
    container_name: growdesk-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grow-network

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: growdesk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/www:/var/www/html:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - grow-network
    restart: unless-stopped

networks:
  grow-network:
    driver: bridge

volumes:
  postgres_data:
  backend_data: 